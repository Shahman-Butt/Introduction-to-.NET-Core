 .NET Framework            .NET Core
       |                      |
  +----+----+              +----+----+
  |         |              |         |
ASP.NET     Other         ASP.NET     Other
Framework .NET framework         Core (.NET) .NET Core Components
   
   
.NET Core (Runtime, BCL, CoreFX) --- 2016
      |
      ├── ASP.NET Core Libraries (MVC, Razor Pages, SignalR, etc.) --- 2016
      |
      ├── ASP.NET Core Applications
      |    ├── MVC Applications --- 2016
      |    ├── Razor Pages Applications --- 2016
      |    ├── Web API Applications --- 2016
      |    └── SignalR Applications --- 2018
      |        
      ├── Middleware (Authentication, Routing, Logging, etc.) --- Part of ASP.NET Core
      |        
      |── Hosting (Kestrel, IIS, Self-Hosting, etc.) --- Part of ASP.NET Core
      |        
      |── Dependency Injection --- Part of ASP.NET Core
      |
      ├── Desktop Applications
      |    ├── WPF Applications --- 2018
      |    ├── Windows Forms Applications --- Not a core focus of .NET Core
      |    └── UWP Applications --- Not a core focus of .NET Core
      |
      └── ...




     .NET Framework (Runtime, BCL, CoreFX) --- 2002
      |
      ├── ASP.NET Libraries (Web Forms, MVC, Web API, etc.) --- 2002
      |
      ├── ASP.NET Applications
      |    ├── Web Forms Applications --- 2002
      |    ├── MVC Applications --- 2007
      |    ├── Web API Applications --- 2012
      |    └── ...
      |        
      ├── Windows Presentation Foundation (WPF) Applications --- 2006
      |
      ├── Windows Forms Applications --- 2003
      |
      ├── Universal Windows Platform (UWP) Applications --- 2015
      |
      ├── Windows Services --- Included with the .NET Framework
      |
      ├── Windows Communication Foundation (WCF) Services --- 2006
      |
      ├── Entity Framework (EF) Framework --- 2007
      |
      └── ...



.NET Core is an open-source, cross-platform framework with a modular architecture designed for developing web applications. It supports multiple languages and targets various frameworks. It provides a consistent development experience, offering high support for CLI tools, flexible deployment options, and compatibility with different operating systems and programming languages.

However, it's important to note that .NET Core does not support desktop applications.

.NET Core:
.NET Core 1.0 - 3.1 (2016 - 2019):
- Introduced as a cross-platform, open-source version of .NET.
- Designed for building modern, lightweight, and modular applications.
- Supported Windows, macOS, and Linux.

.NET 5 (2020):
- Renamed from ".NET Core" to emphasize its unified nature.
- Unified the features of both .NET Core and .NET Framework.
- Introduced new features, optimizations, and improvements.

Introduction to ASP.NET Core:
ASP.NET Core is a free and open-source web framework developed by Microsoft, succeeding ASP.NET. It's a modular framework that runs on both the full .NET Framework (Windows) and cross-platform environments.

.NET Framework:
Windows Desktop Applications:
- Windows Forms Applications (GUI assistance using drag and drop).
- Windows Presentation Foundation (WPF) Applications (2.0 - 4.8) for modern UI and data visualization.

ASP.NET (Web Applications):
- ASP.NET Web Forms Applications.
- ASP.NET MVC Applications.
- ASP.NET Web API Applications.

Services in ASP.NET Core:
- ASP.NET Core Libraries:
  - MVC (Model-View-Controller).
  - Razor Pages.
  - SignalR (for real-time communication).
- ASP.NET Core Applications:
  - MVC Applications.
  - Razor Pages Applications.
  - Web API Applications.
  - SignalR Applications.
- Middleware (Authentication, Routing, Logging, etc.).
- Hosting (Kestrel, IIS, Self-Hosting, etc.).
- Dependency Injection (DI) for managing dependencies and improving testability.

Desktop Applications in .NET Framework:
- WPF Applications for modern and interactive desktop apps.
- Windows Forms Applications with GUI components.
- Universal Windows Platform (UWP) Applications for Windows 10.

The evolution of the .NET ecosystem:
.NET Core (2016):
- Introduced as a cross-platform and open-source framework.
- Supported Windows, macOS, and Linux.

.NET 5 and Beyond (2020):
- Unified ".NET Core" and ".NET Framework" into a single ".NET" platform.
- Introduced new versions with features, improvements, and optimizations.

Difference between .NET Core and ASP.NET Framework:
- .NET Core is modular, lightweight, and cross-platform.
- ASP.NET Framework is Windows-specific and less modular.


 .NET Framework:

 Windows Desktop Applications:
 Windows Forms Applications (GUI assitance drag and drop)
 WPF (Windows Presentation Foundation) Applications -- 2.0-4.8

 ASP.NET (Web Applications):                |  ASP.NET CORE:   (WE CAN MIX ALL)
 ASP.NET Web Forms Applications             |  RAZOR PAGES
 ASP.NET MVC Applications                   |  MVC
 ASP.NET Web API                            |  API
                                            |  BLAZOR server
                                            |  BLAZOR WEBASSEMBLY


ADO.NET  Active Data Objects -- DATABASE RELATED

(asp.net) Services:
Windows Services
WCF (Windows Communication Foundation) Services --  2.0-4.8
LINQ -- 2.0-4.8


ASP.NET VS ASP.NET CORE:
 
The most important difference is the platform support. ASP.NET is built for Windows,
 where ASP.NET Core runs on Windows, Mac and Linux operating system. ASP.NET is based on .NET Framework, 
 but ASP.NET Core has all the features like dependency injection, request response pipelines and middlewares
  introduced in .Net Core to improvise your web or internet based application. In ASP.NET we have a less control
   over the dependencies, where in
ASP.NET Core strict control over the dependencies with the high scalability iterations are there. 
Where in ASP.NET Core we do not have support for Global.asax or Web config, they are far better and replaced 
with appsettings.JSON. ASP.NET gives us support to the components like WebForms, MVC and Web API as well.
 But in ASP.NET Core, we have a MVC support, WebAPI, Razor pages and Blazzors. ASP.NET is supported by all the 
 versions of Visual Studio, 
where ASP.NET Core is supported with the latest version from 2015, 2017 onwards and latest is 2022.



.NET Core Architecture and .NET CLI:

Programming Language
|
|-- Compiler
Common Intermediate Language (CIL) or Microsoft Intermediate Language (MSIL)
Passed to Environment (CLR) for .NET Framework or .NET Core CLR
|
|-- JIT Compiler
Machine Code
Common Type System (CTS):
CTS defines how types are defined, used, and represented across different programming languages in the .NET framework. It ensures type interoperability across languages and platforms.

4 Components:

1. CLI Tools:
CLI tools include command-line interface commands. For example: `dotnet new console --name=projectName`.

2. Roslyn:
Roslyn is the .NET Compiler Platform, an open-source set of compilers and code analysis APIs for C# and Visual Basic languages from Microsoft.

3. CoreFX:
CoreFX is a collection of foundational libraries providing essential functionality to .NET Core applications.

4. CoreCLR (JIT-based CLR):
CoreCLR is the runtime environment responsible for executing .NET Core applications. It's the successor to the traditional .NET Framework's CLR. CoreCLR is designed to be lightweight, high-performance, and cross-platform. A notable feature is its Just-In-Time (JIT) compilation, where Intermediate Language (IL) code is compiled to native machine code at runtime, enhancing execution speed.

MVC Pattern:

The Model-View-Controller (MVC) pattern defines web applications with three logical layers:
- Model (business layer)
- View (display layer)
- Controller (input control)

The MVC architecture is loosely coupled, with each component handling specific tasks. A model represents data and business logic, a view is the user interface, and a controller manages interactions between the model and view.

Serving Static Files:

To serve static files in a .NET web app:
1. Create an empty .NET web app without HTTPS configurations.
2. Add a "wwwroot" folder for static files, including an "index.html" page.
3. Use middlewares like `UseStaticFiles` and `UseDefaultFiles` in the `program.cs` to render static files.
   Example: 


 Loosely coupled archiectureal -
 A model represents the shape of the data and buisness logic  and view in MVC is a user interface, 
 but controller is the main request handler that makes an interaction between model and view. 
 

SERVING STATIC FILES:
 Creating empty .net web app with no https configurations and adding wwwroot folder for static files like adding index.html page and 
 then adding middlewares
  of usestaticfiles 
 and usedefaultfiles in program.cs so that this middleware will render static files that are index.html that we created 
 from wwwroot.
 app.UseDefaultFiles();
app.UseStaticFiles();




 SESSION AND STATE MANAGEMENT:
cookies, session state, temp data, query string, hidden fields, HttpContext.Items, as well as caching.

var builder = WebApplication.CreateBuilder(args);
var app = builder.Build();
builder.Services.AddSession(options =>
{
    options.IdleTimeout = TimeSpan.FromSeconds(5);
    options.Cookie.HttpOnly = true; 
    options.Cookie.IsEssential = true;
});
app.UseSession();
app.Run();


ROUTING configurations:
Different for all frameworks- mvc, razor etc
That is further divided into two types, that is attribute routing and conventional routing.

app.UseRouting();

app.UseAuthorization();

app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Home}/{action=Index}/{id?}");


Hosting environment:
 cmd >> dotnet builde 
 dotnet run


Certainly! The history of the .NET framework is quite extensive, so I'll provide a high-level overview of the major milestones, technologies, and their evolution. Keep in mind that this is a simplified explanation, and there are many more details and nuances to each step.

.NET Framework (2002):

Microsoft introduced the .NET Framework in 2002. It was a comprehensive software development platform that allowed developers to build Windows applications using various programming languages (C#, VB.NET, etc.).
It included a Common Language Runtime (CLR), a class library, and support for multiple languages.
Windows Forms and ASP.NET Web Forms were introduced to create desktop and web applications, respectively.
It provided a rich set of libraries and APIs for building applications.
ASP.NET MVC (2007):

In response to the need for more control over web application structure and behavior, Microsoft introduced ASP.NET MVC (Model-View-Controller) in 2007.
ASP.NET MVC offered an alternative to Web Forms, focusing on separation of concerns, testability, and cleaner code.
Developers could build web applications using a structured pattern (MVC), which made it easier to manage complexity.
Silverlight (2007):

Silverlight was a browser plugin that aimed to provide rich multimedia experiences and interactive applications within web browsers.
It allowed developers to build visually appealing applications that could run on multiple platforms.
Silverlight was often used for media streaming and interactive web applications.
Windows Presentation Foundation (WPF) (2006):

WPF was introduced as a technology for building rich desktop applications with a focus on modern UI and data visualization.
It allowed developers to create visually stunning and interactive Windows applications.
.NET Core (2016):

.NET Core was a significant departure from the traditional .NET Framework. It was a cross-platform, open-source framework designed for building modern, lightweight, and high-performance applications.
.NET Core was designed to be modular, enabling developers to use only the components they needed.
It supported a wider range of platforms beyond Windows, including Linux and macOS.
ASP.NET Core (2016):

ASP.NET Core was the counterpart to .NET Core, designed for building web applications and APIs.
It provided a more flexible and modular approach to web development, improving performance and allowing developers to target multiple platforms.
Blazor (2018):

Blazor introduced a new approach to building web applications using C# and .NET libraries directly in the browser.
It allowed developers to create interactive web UIs without relying on JavaScript. Blazor offered both server-side and client-side hosting models.
.NET 5 and Beyond (2020):

Microsoft announced that ".NET Core" and ".NET Framework" would be unified into a single ".NET" platform starting with .NET 5.
The goal was to provide a consistent platform for building applications across different types of devices and scenarios.
.NET 5 was followed by subsequent versions like .NET 6, each adding new features, improvements, and optimizations.
This progression shows how the .NET ecosystem has evolved to accommodate changing technology trends and developer needs. The move towards open-source, cross-platform compatibility, and modern application architectures has been central to this evolution.


https://www.youtube.com/watch?v=X75vbT-Yv-c


.net core vs framework:

-- Works on most platforms 
--Faster- framework had too many patcthes as it came in 2002.
-- Modular: framework was a whole package but core was just core that you need  ex: hello world doesnt need cryptography
-- logging and dependency injections built in in mvc core 
--open source

  .NET STANDARD:

Common interface of APIS for any .NET Implementaion 

  .NET F UI => .NET F CLASS library => .NET STANDARD CLASS LIBRARY => .NET CORE UI => .NET CORE CLASS LIBRARY


Environment variables:

ASPNETCORE_ENVIRONMENT in launchssettings.json

Dependency Injection:


DI achieved using interfaces and used for decoupling where usually injected into constructors.
In Dependency Injection, services can be registered with different lifetimes to control how instances are
 created and managed. The commonly used lifetimes are:
Transient: A new instance is created every time the service is requested. Transient services are
 suitable for lightweight, stateless services.
Scoped: A single instance is created and shared within the scope of a single request.
 Scoped services are often used in web applications.
Singleton: A single instance is created and shared throughout the entire application's lifetime.

project:   Console project

registering services and containers **??

Middleware Pipeline: (Builtin / custm)
The individual components that make up the pipeline is called a Middleware.
Whenever a user sends a request in .NET Core application request comes to this Kestrel server. 
As I told you, .NET Core applications are cross platform. Kestrel is a server that being supported by multiple operating system.
 In Microsoft .NET framework, this server was IIS that was supported by Microsoft Windows only. So once the request
  comes to this Kestrel server, server sends the request to the request pipeline where multiple middleware as I told you,
   each delegate function which is called a Middleware is attached to this request pipeline.
 For performing authentication, logging, routing, session management, exception handling and whatnot more. 


(EMPTYCORE Project Middleware implemented)

 Global exception handling with custom middleware: (By using cutsom middlewares)

Targetting multiple frameworks using .csproj file and changing <TragetFramework>net6</TragetFramework> to 
<TragetFrameworks>netStandard2.0;.net6</TragetFrameworks>

Code Sharing:
Class Libraries, Nuget packages, .netSTANDARDlIBRARIES


https://www.tutorialspoint.com/asp.net/asp.net_introduction.htm **



















