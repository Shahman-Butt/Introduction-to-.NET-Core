 .NET Framework            .NET Core
       |                      |
  +----+----+              +----+----+
  |         |              |         |
ASP.NET     Other         ASP.NET     Other
Framework .NET framework         Core (.NET) .NET Core Components


.Net Core is open-source, cross-platform, has a modular architecture to develop the web applications,
 supports multiple languages, and target multiple frameworks. Consistent, gives a high support of CLI tools,
  flexible deployment, and has a compatibility with different OS and programming languages

  .NET Doesnt support desktop applications

.NET Framework 1.0 and 1.1:
Introduced in 2002.

.NET Framework 2.0 - 4.8:
Introduced in 2005.

.NET Core: (Cloud based, integration with angular, react )

.NET Core 1.0 - 3.1:
Introduced in 2016 as a cross-platform, open-source version of .NET
Designed for building modern, lightweight, and modular applications.
Supported Windows, macOS, and Linux.

.NET 5:
Renamed from .NET Core to emphasize that it's a unified platform.
Introduced in 2020.
Unified the features of .NET Core and .NET Framework.

Introduction to ASP.NET Core
ASP.NET Core is a free and open-source web framework and successor to ASP.NET,developed by Microsoft.
 It is a modular framework that runs on both the full .NET Framework, on Windows, and the cross-platform

 .NET Framework:

 Windows Desktop Applications:
 Windows Forms Applications (GUI assitance drag and drop)
 WPF (Windows Presentation Foundation) Applications -- 2.0-4.8

 Web Applications:
 ASP.NET Web Forms Applications
 ASP.NET MVC Applications
 ASP.NET Web API


ADO.NET  Active Data Objects -- DATABASE RELATED

(asp.net) Services:
Windows Services
WCF (Windows Communication Foundation) Services --  2.0-4.8
LINQ -- 2.0-4.8


ASP.NET VS ASP.NET CORE:
 
The most important difference is the platform support. ASP.NET is built for Windows,
 where ASP.NET Core runs on Windows, Mac and Linux operating system. ASP.NET is based on .NET Framework, 
 but ASP.NET Core has all the features like dependency injection, request response pipelines and middlewares
  introduced in .Net Core to improvise your web or internet based application. In ASP.NET we have a less control
   over the dependencies, where in
ASP.NET Core strict control over the dependencies with the high scalability iterations are there. 
Where in ASP.NET Core we do not have support for Global.asax or Web config, they are far better and replaced 
with appsettings.JSON. ASP.NET gives us support to the components like WebForms, MVC and Web API as well.
 But in ASP.NET Core, we have a MVC support, WebAPI, Razor pages and Blazzors. ASP.NET is supported by all the 
 versions of Visual Studio, 
where ASP.NET Core is supported with the latest version from 2015, 2017 onwards and latest is 2022.



.NET Core Architecture and .NET CLI 

Programming language  
|  --COMPILER
CIL OR MSIL (ENVIRONMENT CLR)
|  --jit compiler 
MACHINE CODE
Common Type System (CTS): 
In the context of .NET programming, CTS refers to the standard that specifies how types are defined,
 used, and represented across different
 programming languages in the .NET framework. It ensures that types are interoperable among different
  languages and platforms.


 4 Components: (CONTINUE)

 CLI tools:
 Command line interface commands. ex: dotnet new console --name= nameofproject
 
 ROSLYN:
 .NET Compiler Platform, also known by its codename Roslyn,
  is a set of open-source compilers and code analysis APIs for C# and Visual Basic languages from Microsoft. 
 
 COREFX:
 CoreFX is a collection of foundational libraries that provide essential functionality to .NET Core applications.
 
 CORECLR (JIT BASED CLR):
 CoreCLR is the runtime environment responsible for executing .NET Core applications. It's the successor to the traditional
  .NET Framework's CLR. CoreCLR is designed to be lightweight, high-performance, and cross-platform. One notable feature of
   CoreCLR is its Just-In-Time (JIT) compilation, 
 where IL (Intermediate Language) code is compiled to native machine code at runtime, improving execution speed. 


 MVC pattern:

The MVC model defines web applications with 3 logic layers:

Model (business layer)

View (display layer)

Controller (input control)

 Loosely coupled archiectureal -
 A model represents the shape of the data and buisness logic  and view in MVC is a user interface, 
 but controller is the main request handler that makes an interaction between model and view. 
 

SERVING STATIC FILES:
 Creating empty .net web app with no https configurations and adding wwwroot folder for static files like adding index.html page and 
 then adding middlewares
  of usestaticfiles 
 and usedefaultfiles in program.cs so that this middleware will render static files that are index.html that we created 
 from wwwroot.
 app.UseDefaultFiles();
app.UseStaticFiles();




 SESSION AND STATE MANAGEMENT:
cookies, session state, temp data, query string, hidden fields, HttpContext.Items, as well as caching.

var builder = WebApplication.CreateBuilder(args);
var app = builder.Build();
builder.Services.AddSession(options =>
{
    options.IdleTimeout = TimeSpan.FromSeconds(5);
    options.Cookie.HttpOnly = true; 
    options.Cookie.IsEssential = true;
});
app.UseSession();
app.Run();


ROUTING configurations:
Different for all frameworks- mvc, razor etc
That is further divided into two types, that is attribute routing and conventional routing.

app.UseRouting();

app.UseAuthorization();

app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Home}/{action=Index}/{id?}");


Hosting environment:
 cmd >> dotnet builde 
 dotnet run
